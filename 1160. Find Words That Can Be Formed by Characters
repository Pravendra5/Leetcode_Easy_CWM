// JAVA Code
// we can aslo use hashmap to solve this question

public class Solution {
    public int countCharacters(String[] words, String chars) {
        int[] charCount = new int[26];

        for (char ch : chars.toCharArray()) {
            charCount[ch - 'a']++;
        }

        int result = 0;

        for (String word : words) {
            int[] wordCount = new int[26];
            for (char ch : word.toCharArray()) {
                wordCount[ch - 'a']++;
            }

            boolean ok = true;
            for (int i = 0; i < 26; i++) {
                if (wordCount[i] > charCount[i]) {
                    ok = false;
                    break;
                }
            }

            if (ok) {
                result += word.length();
            }
        }

        return result;
    }

}

// Python Code

class Solution:
    def countCharacters(self, words: List[str], chars: str) -> int:
        # Step 1: Count the frequency of each character in `chars`
        char_count = [0] * 26
        for ch in chars:
            char_count[ord(ch) - ord('a')] += 1

        result = 0

        # Step 2: Check each word in `words`
        for word in words:
            # Count the frequency of each character in the current word
            word_count = [0] * 26
            for ch in word:
                word_count[ord(ch) - ord('a')] += 1

            # Step 3: Check if the word can be formed by `chars`
            ok = True
            for i in range(26):
                if word_count[i] > char_count[i]:
                    ok = False
                    break

            # If valid, add the length of the word to the result
            if ok:
                result += len(word)

        return result
